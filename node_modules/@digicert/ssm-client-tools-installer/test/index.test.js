/* eslint @typescript-eslint/no-var-requires: "off" */
const main = require("../index");
const installer = require("./../installwindowsTools");
const installToolsBasedOnOS = require("../installToolsOnOS");
const filesystems = require("../utils/fileSystemUtils");
const tooltobeused = ["smtools-windows-x64.msi"];
const linuxTool = ["smtools-linux-x64.zip"];
const services = require("../utils/services");
const wintool = require("../runwintools");
const installLinux = require("../installLinuxTools");
const runlinux = require("../runLinuxTools");
const ostype = require("../OsType");
const installMac = require("../installMacTools");
const fs = require("fs");
const os = require("os");
const installationPath = filesystems.tempDirectory();
const extractPath = `${installationPath}`;
const configfile = `${installationPath}\\pkcsproperties.cfg`;

describeOnLinux = os.type() === "Linux" ? describe : describe.skip;
describeosType = os.type() === "Windows_NT" ? describe : describe.skip;

//testing windowstoolsextractor
test("windowstoolsextraction", async () => {
  const addapi = jest.spyOn(services, "callApi");
  addapi.mockReturnValue("3c");
  await expect(
    wintool.runWinToolBasedInstallationOrExtraction(
      tooltobeused,
      installationPath,
      "keypair-signing"
    )
  ).toBeDefined();
  expect(addapi).toHaveBeenCalled();
});

describeOnLinux("linux tools", () => {
  it("linux integration", async () => {
    await expect(main.main("keypair-signing")).toBe(0);
  });
  it("linuxTools extraction", async () => {
    services.getConfigFilePath = jest.fn(() => configfile);
    runlinux.runLnxToolBasedInstallationOrExtraction = jest.fn(
      () => extractPath
    );
    fs.writeFileSync = jest.fn();
    await installLinux.installLinuxTools(
      installationPath,
      linuxTool,
      "keypair-signing"
    );
    expect(runlinux.runLnxToolBasedInstallationOrExtraction).toHaveBeenCalled();
    expect(services.getConfigFilePath).toHaveBeenCalled();
  });
  it("runlinux file testing", async () => {
    const ePath = await runlinux.runLnxToolBasedInstallationOrExtraction(
      linuxTool,
      installationPath,
      "gpg-signing"
    );
    expect(runlinux.runLnxToolBasedInstallationOrExtraction).toBeDefined();
  });
});

test("windowstools", async () => {
  services.getAPICall = jest.fn();
  wintool.runWinToolBasedInstallationOrExtraction = jest.fn(() => extractPath);
  services.getConfigFilePath = jest.fn(() => configfile);

  const config = await installer.installWindowsTools(
    installationPath,
    tooltobeused,
    "keypair-signing"
  );

  expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalled();
  expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalledTimes(
    1
  );
  expect(config).toBe(configfile);
});

test("windows gpgtools", async () => {
  services.getAPICall = jest.fn();
  wintool.runWinToolBasedInstallationOrExtraction = jest.fn(() => extractPath);
  services.getConfigFilePath = jest.fn(() => configfile);

  const config = await installer.installWindowsTools(
    installationPath,
    tooltobeused,
    "gpg-signing"
  );

  expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalled();
  expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalledTimes(
    1
  );
});

describeosType("os", () => {
  it("ostype call", async () => {
    services.getAPICall = jest.fn();
    wintool.runWinToolBasedInstallationOrExtraction = jest.fn(
      () => extractPath
    );
    services.getConfigFilePath = jest.fn(() => configfile);

    const addmock = jest.spyOn(installer, "installWindowsTools");

    await installToolsBasedOnOS.installToolsBasedOnOS(installationPath, "");
    expect(addmock).toHaveBeenCalled();
    expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalled();
    expect(
      wintool.runWinToolBasedInstallationOrExtraction
    ).toHaveBeenCalledTimes(1);
  });
});

test("linux os call", async () => {
  ostype.getOS = jest.fn(() => "linux");
  installLinux.installLinuxTools = jest.fn();
  await installToolsBasedOnOS.installToolsBasedOnOS(installationPath);
  expect(ostype.getOS).toHaveBeenCalled();
});

test("mac os call", async () => {
  ostype.getOS = jest.fn(() => "darwin");
  installMac.installMacTools = jest.fn();
  await installToolsBasedOnOS.installToolsBasedOnOS(installationPath);
  expect(ostype.getOS).toHaveBeenCalled();
});
test("win call", async () => {
  await expect(
    wintool.runWinToolBasedInstallationOrExtraction(
      tooltobeused,
      installationPath,
      "keypair-signing"
    )
  ).toBeDefined();
});

test("main call", async () => {
  services.getAPICall = jest.fn();
  wintool.runWinToolBasedInstallationOrExtraction = jest.fn(() => extractPath);
  services.getConfigFilePath = jest.fn(() => configfile);

  const addmock = jest.spyOn(installer, "installWindowsTools");

  installToolsBasedOnOS.installToolsBasedOnOS = jest.fn(() => addmock);
  const ssmTools = await main.main();

  expect(installToolsBasedOnOS.installToolsBasedOnOS).toHaveBeenCalled();
  expect(ssmTools).toBe(0);
});

test("main function Error branch testing", async () => {
  installToolsBasedOnOS.installToolsBasedOnOS = jest.fn(() => {
    throw new Error();
  });
  const ssmTools = await main.main();

  expect(installToolsBasedOnOS.installToolsBasedOnOS).toHaveBeenCalled();
  expect(ssmTools).toBe(1);
});
