const usecase = "keypair-signing";
const installToolsBasedOnOS = require("../installToolsOnOS");
const filesystems = require("../utils/fileSystemUtils");
const installwindows = require("../installwindowsTools");
const services = require("../utils/services");
const runwin = require("../runwintools");
const getos = require("../OsType");
const tooltobeused = ["smtools-windows-x64.msi"];
const installationPath = filesystems.tempDirectory();
const extractPath = `${installationPath}`;
const configfile = `${installationPath}\\pkcsproperties.cfg`;

test("keypair branch", async () => {
  installwindows.installWindowsTools = jest.fn(() => extractPath);
  await installToolsBasedOnOS.installToolsBasedOnOS(installationPath, usecase);
  expect(installwindows.installWindowsTools).toHaveBeenCalled();
});

test("gpg branch", async () => {
  installwindows.installWindowsTools = jest.fn(() => extractPath);
  await installToolsBasedOnOS.installToolsBasedOnOS(
    installationPath,
    "gpg-signing"
  );
  expect(installwindows.installWindowsTools).toHaveBeenCalled();
});

test("windowstools", async () => {
  services.getConfigFilePath = jest.fn(() => configfile);
  services.callApi = jest.fn();
  await runwin.runWinToolBasedInstallationOrExtraction(
    tooltobeused,
    installationPath,
    ""
  );

  expect(services.callApi).toHaveBeenCalled();
});

test("filesystems", async () => {
  process.env.AGENT_WORKFOLDER = jest.fn(() => installationPath);
  await expect(filesystems.tempDirectory()).toBeDefined();
});

test("getos branch", async () => {
  process.env["Agent_OS"] = "Linux";
  await expect(getos.getOS()).toBeDefined();
});
