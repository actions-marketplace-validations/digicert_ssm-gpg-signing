import path from "path";
import { callApi, getAPICall } from "./utils/services";
import * as tl from "azure-pipelines-task-lib/task";
import * as tr from "azure-pipelines-task-lib/toolrunner";

export async function runWinToolBasedInstallationOrExtraction(
  toolToBeUsed: Array<string>,
  tempDirectoryPath: string,
  usecase: string
): Promise<string> {
  let extractPath = "";
  for (let i = 0; i < toolToBeUsed.length; i++) {
    await callApi(toolToBeUsed[i], tempDirectoryPath);

    if (usecase == "" || usecase == "keypair-signing") {
      //checking for .msi files
      if (toolToBeUsed[i].includes(".msi")) {
        extractPath = path.join(
          tempDirectoryPath,
          toolToBeUsed[i].replace(".msi", "")
        );

        //   //tool to run .msi file
        const msiRunner: tr.ToolRunner = tl
          .tool("msiexec")
          .arg([
            `/i`,
            `${tempDirectoryPath}\\${toolToBeUsed}`,
            "/quiet",
            `INSTALLDIR=${extractPath}`,
          ]);
        const regReturnCode: number = await msiRunner.exec();
        if (regReturnCode != 0) {
          throw new Error(
            `Installation of msi failed with return code ${regReturnCode}`
          );
        }

        console.log("installation of smctl returned code", regReturnCode);
      }
      extractPath = path.join(tempDirectoryPath);

      if (getAgentType() == AgentType.SELF_HOSTED) {
        //cli tools installation
        const installationLocation = tl
          .tool("wmic")
          .arg([
            "product",
            "where",
            "Vendor='DigiCert Inc.' and name='DigiCert One Signing Manager Tools'",
            "get",
            "installlocation",
            "/format:list",
          ])
          .execSync();

        const { stdout } = installationLocation;
        extractPath = stdout.split("=")[1].trim();
      }
    }
  }
  return extractPath;
}

enum AgentType {
  AZURE_HOSTED,
  SELF_HOSTED,
}

const getAgentType = () => {
  return AgentType.SELF_HOSTED;
};

module.exports = { runWinToolBasedInstallationOrExtraction, getAPICall };
